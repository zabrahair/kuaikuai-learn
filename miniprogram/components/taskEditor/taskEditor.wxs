function isDisabled(curTask, TASK_STATUS_OBJ){
  if (curTask.status.value == TASK_STATUS_OBJ.CREATE.value 
  || curTask.status.value == TASK_STATUS_OBJ.COPY.value
  || curTask.status.value == TASK_STATUS_OBJ.SAVED.value){
    return false;
  }else{
    return true;
  }
}

function isItemShown(itemName, curTask, curOpenid, TASK_STATUS_OBJ){
  // console.log('isItemShown:', JSON.stringify(itemName, null, 4))
  // console.log('isItemShown:', JSON.stringify(curTask, null, 4))
  // console.log('isItemShown:', JSON.stringify(curOpenid, null, 4))
  // console.log('isItemShown:', JSON.stringify(TASK_STATUS_OBJ, null, 4))
  switch(itemName){
    case 'add_finish_image':
      if ((curTask.status.value == TASK_STATUS_OBJ.CLAIMED.value 
        || curTask.status.value == TASK_STATUS_OBJ.IMPLEMENTING.value) 
        && curTask.toWho.openid == curOpenid) {
        return true;
      } else {
        return false;
      } 
      break;
    case 'finish_images_list':
      if (curTask.status.value == TASK_STATUS_OBJ.CLAIMED.value
        ||curTask.status.value == TASK_STATUS_OBJ.IMPLEMENTING.value
        || curTask.status.value == TASK_STATUS_OBJ.FINISHED.value
        || curTask.status.value == TASK_STATUS_OBJ.APPROVED.value
        || curTask.status.value == TASK_STATUS_OBJ.CANCELED.value) {
        return true;
      } else {
        return false;
      }
    case 'enable_input_comment':
      if (curTask.status.value == TASK_STATUS_OBJ.CLAIMED.value
        || curTask.status.value == TASK_STATUS_OBJ.IMPLEMENTING.value
        || curTask.status.value == TASK_STATUS_OBJ.FINISHED.value) {
        return true;
      } else {
        return false;
      }
      break;
    default:
  }
 
}

function isButtonShown(curTask, nextTaskValue, curOpenid, TASK_STATUS_OBJ){
  switch (nextTaskValue){
    case 'ASSIGNED':
      if (curTask.status.value == TASK_STATUS_OBJ.CREATE.value 
      || curTask.status.value == TASK_STATUS_OBJ.COPY.value 
      || curTask.status.value == TASK_STATUS_OBJ.SAVED.value){
        return true
      } else {
        return false
      }
      break;
    case 'CLAIMED':
      if ((curTask.status.value == TASK_STATUS_OBJ.ASSIGNED.value || curTask.status.value == TASK_STATUS_OBJ.RECEIVED.value) && curTask.toWho.openid == curOpenid ){
        return true
      }else{
        return false
      }
      break;
    case 'IMPLEMENTING':
      if ((curTask.status.value == TASK_STATUS_OBJ.CLAIMED.value || curTask.status.value == TASK_STATUS_OBJ.IMPLEMENTING.value) && curTask.toWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;
    case 'FINISHED':
      if ((curTask.status.value == TASK_STATUS_OBJ.CLAIMED.value || curTask.status.value == TASK_STATUS_OBJ.IMPLEMENTING.value) && curTask.toWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;
    case 'APPROVED':
      if (curTask.status.value == TASK_STATUS_OBJ.FINISHED.value && curTask.fromWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;
    case 'CANCELED':
      if ((curTask.status.value == TASK_STATUS_OBJ.SAVED.value 
      || curTask.status.value == TASK_STATUS_OBJ.ASSIGNED.value 
      || curTask.status.value == TASK_STATUS_OBJ.RECEIVED.value
      || curTask.status.value == TASK_STATUS_OBJ.REJECTED.value) 
      && curTask.fromWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;
    case 'DELETED':
      if ((curTask.status.value == TASK_STATUS_OBJ.SAVED.value
        || curTask.status.value == TASK_STATUS_OBJ.ASSIGNED.value
        || curTask.status.value == TASK_STATUS_OBJ.RECEIVED.value
        || curTask.status.value == TASK_STATUS_OBJ.REJECTED.value
        || curTask.status.value == TASK_STATUS_OBJ.APPROVED.value
        || curTask.status.value == TASK_STATUS_OBJ.CANCELED.value)
        && curTask.fromWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;
    case 'REJECTED':
      if ((curTask.status.value == TASK_STATUS_OBJ.ASSIGNED.value
        || curTask.status.value == TASK_STATUS_OBJ.RECEIVED.value)
        && curTask.toWho.openid == curOpenid) {
        return true
      } else {
        return false
      }
      break;            
    default:
  }
}

function switchBonusIcon(curTask, BONUS_CLASSES_OBJ) {
  // console.log('switchBonusIcon', JSON.stringify(curTask.status,null,4))
  var statusValue = curTask.status.value
  var curBonus = curTask.bonus
  var bonus = BONUS_CLASSES_OBJ[curBonus.name]
  return bonus.iconOn
}

// 导出对外暴露的属性
module.exports = {
  isDisabled: isDisabled,
  isButtonShown: isButtonShown,
  isItemShown: isItemShown,
  switchBonusIcon: switchBonusIcon,
}